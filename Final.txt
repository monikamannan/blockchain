 // contracts/GLDToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/IERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/ERC20.sol";

contract BIDToken is ERC20 {
    constructor(uint256 initialBid) public ERC20("BIDTKN", "BID") {
        _mint(msg.sender, initialBid);
    }
}


contract AuctionMarketPlace
{
    
     
   struct  auction {
    uint auctionID;   
    string auctionName;
    // address owner;
    uint ProdPrice;
    address  owner;
   // uint  endTime;
    uint  totalReceived;
    uint  LowestPrice;
   // uint  soldTokens;
    
    Stages  stage;
 
   }
    enum Stages {
        AuctionDeployed,
        AuctionSetUp,
        AuctionStarted,
        AuctionEnded,
        TradingStarted
    }
    //creation instance
   IERC20 token; //reference to the ERC20 interface contract
   address public owner;
   Stages public stage;
   address public seller;
   uint public startBlock;
  modifier atStage(Stages _stage) {
        if (stage != _stage)
           
            return;
        _;
    }
  
    modifier isOwner() {
        if (msg.sender != owner)
            // Only owner is allowed to proceed
            return;
        _;
    }
    constructor( IERC20 _token,address  _seller) public {
       token=_token;
       
        seller=_seller;
       
//        owner = msg.sender;
               
        stage = Stages.AuctionDeployed;
    }
    mapping (address => auction) public auctions;
    auction[] public auctioList;
     function  CreateAuction( uint _prodprice) public returns (bool) {
        
          auctions[msg.sender]=auction({
          auctionID:auctioList.length,     
          ProdPrice:_prodprice,
          auctionName:"dummy",
          owner:msg.sender,
          totalReceived:0,
          LowestPrice:0,
          stage:Stages.AuctionDeployed
          
      });
        
      auctioList.push(auctions[msg.sender]);
        return true;
     }
    function startAuction()
        public
        
        atStage(Stages.AuctionSetUp)
    {
        stage = Stages.AuctionStarted;
        startBlock = block.number;
    }
    
    
     
    struct Bid {
        address bidderaddress;
        uint256 value;  

     }
     mapping (address => Bid) public bids;
     // Allowed withdrawals of previous bids
    mapping(address => uint) pendingReturns;
    address public LowestBidder;
    uint public LowestBid;
    bool ended;
    
  // Events that will be emitted on changes.
    event LowestBidDecreased(address bidder, uint amount);
    event AuctionEnded(address winner, uint amount);
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    
    // function bid(uint numtokens,address Auction) public 
      function bid( uint auctionID, uint latestBidValue) public 
     {
         //token approve refactoring preapprove by user /raisebids
         auction memory obj = auctioList[auctionID];
     require(
       obj.stage != Stages.AuctionEnded,
         "Bid should not ended"
         );
     uint256 bidauction;
     bidauction=obj.LowestPrice;
        require(
           obj.LowestPrice!=0 && latestBidValue <obj.LowestPrice,
            "There already is a lower bid."
        );
     
        

        // If the bid is not higher, send the
        // money back.
        //msg.value < prodprice  checkk  msg.value <Auction.LowestPrice  and Lowestprice!=0
        token.transferFrom(msg.sender, address(this), latestBidValue);
        obj.LowestPrice=latestBidValue;

        if (LowestBid != 0) {
          
            pendingReturns[LowestBidder] += LowestBid;
        }
        LowestBidder = msg.sender;
        LowestBid = msg.value;
        
         
    }
    
     function transfer(address _to, uint256 _value) //address of token reciever and value (transfer sender's token to given address)
        public
        returns (bool)
    {
        require (
            balances[msg.sender] < _value ,
            "Balance too low"
            
        );
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        token.transferFrom(msg.sender, _to, _value);
        return true;
    }
    
    //  function approve(address _spender, uint256 _value)
    //     public
    //     returns (bool)
    // {
    //     allowed[msg.sender][_spender] = _value;
    //     approve(msg.sender, _spender, _value);
    //     return true;
    // }
    // Returns remaining allowance for spender
     function allowance(address _owner, address _spender)
        public
        returns (uint256)
    {
        return allowed[_owner][_spender];
    }
    //number of tokens owned by given address
   function balanceOf(address _owner)
        
        public
        returns (uint256)
    {
        return balances[_owner];
    }
    function auctionEnd() public {
        
        // 1. Conditions
       // require(now >= endTime, "Auction not yet ended.");
        require(!ended, "auctionEnd has already been called.");

        // 2. Effects
        ended = true;
        emit AuctionEnded(LowestBidder, LowestBid);

        // 3. Interaction
        ///.transfer(LowestBid); ??????????????????????
    }
      
    
   
    function updateStage()
        public
        
        returns (Stages)
    {
        return stage;
    }
     
}




/*
contract BidEventApp {
    IERC20 tokenBID;
    IERC20 tokenTether;

    uint EMtokensPerRegistration = 50; //almost free for you!
    uint tetherPerRegistration = 20;
    
    constructor(IERC20 _tokenEM, IERC20 _tokenTether) public {
        tokenBID = _tokenEM;
        tokenTether = _tokenTether; //0xdac17f958d2ee523a2206206994597c13d831ec7
    }
    
    function registerForEvent() public {
        
        require(tokenBID.transferFrom(msg.sender, address(this), EMtokensPerRegistration) == true, "Registration did not succeed!");
    }
    
    function registerForEventWithTether() public{
        
        require(tokenTether.transferFrom(msg.sender, address(this), tetherPerRegistration) == true, "Registration did not succeed!");
    }

}
*/